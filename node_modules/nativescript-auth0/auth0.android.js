"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common = require("./auth0.common");
var util = require("utils/utils");
var frameModule = require("ui/frame");
var application = require("application");
var appSettings = require("application-settings");
var localResolve;
var localReject;
var Auth0Lock = (function (_super) {
    __extends(Auth0Lock, _super);
    function Auth0Lock(options) {
        return _super.call(this, options) || this;
    }
    Auth0Lock.prototype.show = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                localResolve = resolve;
                localReject = reject;
                _this._callback = new AuthCallback();
                var auth0 = new com.auth0.android.Auth0(_this.options.clientId, _this.options.domain);
                var builder = com.auth0.android.lock.Lock.newBuilder(auth0, _this._callback);
                var activity = frameModule.topmost().android.activity;
                if (_this.options.scope) {
                    var scopeItems = _this.options.scope.join(" ");
                    console.log("Adding scope of " + scopeItems);
                    var paramBuilder = com.auth0.android.authentication.ParameterBuilder.newBuilder();
                    var authenticationParameters = paramBuilder.setScope(scopeItems).asDictionary();
                    builder.withAuthenticationParameters(authenticationParameters);
                }
                _this._lock = builder.build(activity);
                var context = util.ad.getApplicationContext();
                var lockIntent = _this._lock.newIntent(activity);
                if (lockIntent.resolveActivity(context.getPackageManager()) != null) {
                    application.android.foregroundActivity.startActivity(lockIntent);
                }
            }
            catch (args) {
                reject(args);
            }
        });
    };
    return Auth0Lock;
}(common.Auth0Lock));
exports.Auth0Lock = Auth0Lock;
var AuthCallback = com.auth0.android.lock.AuthenticationCallback.extend({
    onAuthentication: function (credentials) {
        console.log("Authentication Success");
        var accessToken = credentials.getAccessToken();
        var idToken = credentials.getIdToken();
        var refreshToken = credentials.getRefreshToken();
        var creds = {
            accessToken: accessToken,
            idToken: idToken,
            refreshToken: refreshToken,
        };
        appSettings.setString(common.Auth0Lock._tokenKey, JSON.stringify(creds));
        localResolve({
            credentials: creds,
            android: credentials
        });
    },
    onCanceled: function () {
        console.log("Cancelled, user pressed back!!!");
        localReject(new Error("Cancelled"));
    },
    onError: function (error) {
        console.log("Exception occurred!!! " + error.getMessage());
        localReject(new Error(error.getMessage()));
    },
    onDestroy: function () {
        console.log("DESTROY");
    }
});
exports.AuthCallback = AuthCallback;
//# sourceMappingURL=auth0.android.js.map
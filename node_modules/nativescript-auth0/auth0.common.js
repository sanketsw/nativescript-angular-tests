"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpModule = require("http");
var appSetttings = require("application-settings");
var jwt = require("./jwt");
var Auth0Lock = (function () {
    function Auth0Lock(options) {
        this.options = options;
        this.credientials = {
            accessToken: "",
            idToken: "",
            refreshToken: ""
        };
        this.refresh();
    }
    Auth0Lock.prototype.refresh = function () {
        if (appSetttings.hasKey(Auth0Lock._tokenKey)) {
            var data = JSON.parse(appSetttings.getString(Auth0Lock._tokenKey));
            this.credientials = {
                accessToken: data.accessToken,
                idToken: data.idToken,
                refreshToken: data.refreshToken,
            };
        }
    };
    Auth0Lock.prototype.getUserInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            httpModule.request({
                url: "https://" + _this.options.domain + "/userinfo",
                method: "GET",
                headers: {
                    "Authorization": "Bearer " + _this.credientials.accessToken
                }
            }).then(function (response) {
                resolve(response.content.toJSON());
            }, function (e) {
                console.log(e);
                reject(e);
            });
        });
    };
    Auth0Lock.prototype.getTokenInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            httpModule.request({
                url: "https://" + _this.options.domain + "/tokeninfo",
                method: "POST",
                headers: { "Content-Type": "application/json" },
                content: JSON.stringify({ "id_token": _this.credientials.idToken })
            }).then(function (response) {
                resolve(response.content.toJSON());
            }, function (e) {
                reject(e);
            });
        });
    };
    Auth0Lock.prototype.hasValidToken = function () {
        var token = this.credientials.accessToken;
        if (token === "")
            return false;
        if (this.isTokenExpired())
            return false;
        return true;
    };
    Auth0Lock.prototype.isTokenExpired = function () {
        var token = this.credientials.idToken;
        if (token === "" || token === null)
            return true;
        var data = jwt(token);
        var expiresOn = new Date(data.ext);
        return (expiresOn > new Date()) ? true : false;
    };
    Auth0Lock.prototype.clearTokens = function () {
        appSetttings.remove(Auth0Lock._tokenKey);
    };
    return Auth0Lock;
}());
Auth0Lock._tokenKey = "auth0Tokens";
Auth0Lock._nullCredsMessage = "Unknown or invalid credientials";
exports.Auth0Lock = Auth0Lock;
//# sourceMappingURL=auth0.common.js.map